# Release procedure:
# 1. Update the changelog and stage it in git.
# 2. Run `yarn version --[major|minor|patch]`.
# 3. Push both the commit and tags to GitHub (`git push --tags Automattic` and
#    `git push Automattic HEAD:master`).
# 4. Create a draft release manually using the GitHub UI.
# 5. Set the `jobs.*.strategy.matrix.node` arrays to the set of Node.js versions
#    to build for.
# 6. Set the `jobs.*.strategy.matrix.canvas_tag` arrays to the set of Canvas
#    tags to build. (Usually this is a single tag, but can be an array when a
#    new version of Node.js is released and older versions of Canvas need to be
#    built.)
# 7. Commit and push this file to the build-trigger branch.
# 8. In the Actions tab, navigate to the "Make Prebuilds" workflow and click
#    "Run workflow". Make sure you pick the correct branch to run from.
# 9. Once the builds succeed, promote the draft release to a full release.

name: Make Prebuilds
on: workflow_dispatch

# UPLOAD_TO can be specified to upload the release assets under a different tag
# name (e.g. for testing). If omitted, the assets are published under the same
# release tag as the canvas version being built.
# env:
#   UPLOAD_TO: "v0.0.1"

# If/when node-canvas moves to Node.js 10+, the latest node-gyp can be used.

# Tip: The build will use the files in prebuild/ *from the canvas_tag that
# you're building*, which is not necessarily your last push.

jobs:
  # Linux:
  #   strategy:
  #     matrix:
  #       node: [14]
  #       canvas_tag: ["v2.7.0"] # e.g. "v2.6.1"
  #   name: ${{ matrix.canvas_tag}}, Node.js ${{ matrix.node }}, Linux
  #   runs-on: ubuntu-latest
  #   container:
  #     image: chearon/canvas-prebuilt:7
  #   env:
  #     CANVAS_VERSION_TO_BUILD: ${{ matrix.canvas_tag }}
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         ref: ${{ matrix.canvas_tag }}

  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ matrix.node }}

  #     - name: Build
  #       run: |
  #         npm install -g node-gyp@6.1
  #         npm install --ignore-scripts
  #         . prebuild/Linux/preinstall.sh
  #         cp prebuild/Linux/binding.gyp binding.gyp
  #         node-gyp rebuild -j 2
  #         . prebuild/Linux/bundle.sh

  #     - name: Test binary
  #       run: |
  #         cd /root/harfbuzz-* && make uninstall
  #         cd /root/cairo-* && make uninstall
  #         cd /root/pango-* && make uninstall
  #         cd /root/libpng-* && make uninstall
  #         cd /root/libjpeg-* && make uninstall
  #         cd /root/giflib-* && make uninstall
  #         cd $GITHUB_WORKSPACE && npm test

  #     - name: Make bundle
  #       id: make_bundle
  #       run: . prebuild/tarball.sh

  #     - name: Upload
  #       uses: actions/github-script@v2
  #       with:
  #         script: |
  #           const fs = require("fs");
  #           const assetName = "${{ steps.make_bundle.outputs.asset_name }}";
  #           const tagName = process.env.UPLOAD_TO || process.env.CANVAS_VERSION_TO_BUILD;
  #           const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");

  #           const releases = await github.repos.listReleases({owner, repo});
  #           const release = releases.data.find(r => r.tag_name === tagName);
  #           if (!release)
  #             throw new Error(`Tag ${tagName} not found. Did you make the GitHub release?`);

  #           const oldAsset = release.assets.find(a => a.name === assetName);
  #           if (oldAsset)
  #             await github.repos.deleteReleaseAsset({owner, repo, asset_id: oldAsset.id});

  #           // (This is equivalent to actions/upload-release-asset. We're
  #           // already in a script, so might as well do it here.)
  #           const r = await github.repos.uploadReleaseAsset({
  #             url: release.upload_url,
  #             headers: {
  #               "content-type": "application/x-gzip",
  #               "content-length": `${fs.statSync(assetName).size}`
  #             },
  #             name: assetName,
  #             data: fs.readFileSync(assetName)
  #           });

  # macOS:
  #   strategy:
  #     matrix:
  #       node: [8, 9, 10, 11, 12, 13, 14]
  #       canvas_tag: ["v2.7.0"] # e.g. "v2.6.1"
  #   name: ${{ matrix.canvas_tag}}, Node.js ${{ matrix.node }}, macOS
  #   runs-on: macos-latest
  #   env:
  #     CANVAS_VERSION_TO_BUILD: ${{ matrix.canvas_tag }}
  #   steps:
  #     - uses: actions/checkout@v2
  #       with:
  #         ref: ${{ matrix.canvas_tag }}

  #     - uses: actions/setup-node@v1
  #       with:
  #         node-version: ${{ matrix.node }}

  #     - name: Build
  #       run: |
  #         npm install -g node-gyp@6.1
  #         npm install --ignore-scripts
  #         . prebuild/macOS/preinstall.sh
  #         cp prebuild/macOS/binding.gyp binding.gyp
  #         node-gyp rebuild -j 2
  #         . prebuild/macOS/bundle.sh

  #     - name: Test binary
  #       run: |
  #         brew uninstall --force cairo pango librsvg giflib harfbuzz
  #         npm test

  #     - name: Make bundle
  #       id: make_bundle
  #       run: . prebuild/tarball.sh

  #     - name: Upload
  #       uses: actions/github-script@v2
  #       with:
  #         script: |
  #           const fs = require("fs");
  #           const assetName = "${{ steps.make_bundle.outputs.asset_name }}";
  #           const tagName = process.env.UPLOAD_TO || process.env.CANVAS_VERSION_TO_BUILD;
  #           const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");

  #           const releases = await github.repos.listReleases({owner, repo});
  #           const release = releases.data.find(r => r.tag_name === tagName);
  #           if (!release)
  #             throw new Error(`Tag ${tagName} not found. Did you make the GitHub release?`);

  #           const oldAsset = release.assets.find(a => a.name === assetName);
  #           if (oldAsset)
  #             await github.repos.deleteReleaseAsset({owner, repo, asset_id: oldAsset.id});

  #           // (This is equivalent to actions/upload-release-asset. We're
  #           // already in a script, so might as well do it here.)
  #           const r = await github.repos.uploadReleaseAsset({
  #             url: release.upload_url,
  #             headers: {
  #               "content-type": "application/x-gzip",
  #               "content-length": `${fs.statSync(assetName).size}`
  #             },
  #             name: assetName,
  #             data: fs.readFileSync(assetName)
  #           });

  Win:
    strategy:
      matrix:
        node: [12]
        canvas_tag: ["v2.7.0"] # e.g. "v2.6.1"
    name: ${{ matrix.canvas_tag}}, Node.js ${{ matrix.node }}, Windows
    runs-on: windows-latest
    env:
      CANVAS_VERSION_TO_BUILD: ${{ matrix.canvas_tag }}
    steps:
      # GitHub runners now have msys2 installed, but msys is not on the path and
      # is apparently slow to start.
      # https://github.com/msys2/setup-msys2#setup-msys2
      # https://github.com/actions/virtual-environments/pull/632
      - uses: msys2/setup-msys2@v2
        with:
          update: true
          path-type: inherit

      - uses: actions/setup-node@v1
        with:
          node-version: ${{ matrix.node }}

      - uses: actions/checkout@v2
        # TEMPORARILY COMMENTED OUT so that the pushed branch is used instead of
        # the tagged commit. This branch has the binding.gyp file modified.
        # with:
        #   ref: ${{ matrix.canvas_tag }}

      - name: Build
        run: |
          npm install -g node-gyp@6.1
          npm install --ignore-scripts
          msys2 -c ". prebuild/Windows/preinstall.sh"
          msys2 -c "cp prebuild/Windows/binding.gyp binding.gyp"
          msys2 -c "node-gyp rebuild -j 2"

      - name: Bundle
        run: |
          Invoke-WebRequest "http://www.dependencywalker.com/depends22_x64.zip" -OutFile depends22_x64.zip
          7z e depends22_x64.zip
      # ./depends.exe -c -oc depends.csv build\\Release\\canvas.node -d prebuild\\Windows\\module-search-order.dwp
      # Wait-Process -Name depends
      - name: Bundle pt 2
        shell: msys2 {0}
        run: |
          ./depends.exe -c -oc depends.csv build\\Release\\canvas.node || true
          [ -f depends.csv ] || { echo "error invoking depends.exe"; exit 1; }

          echo "depends.csv:"
          cat depends.csv

          copies=$(comm -12 \
            <(cat depends.csv | cut -d ',' -f2 | sed 's/"//g' | tr '[:upper:]' '[:lower:]' | sort) \
            <(find /mingw64/bin -name '*.dll' -printf "%f\n" | tr '[:upper:]' '[:lower:]' | sort) \
          );

          echo "Copies:"
          echo $copies

          for dll in $copies; do
            cp /mingw64/bin/$dll build/Release
          done;

          echo "$ ls build/release/"
          ls build/release/

      # - name: Manual Bundle
      #   run: |
      #     # Reported by depends on build server:
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libcairo-2.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libfreetype-6.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libgif-7.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libglib-2.0-0.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libgobject-2.0-0.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libjpeg-8.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libpango-1.0-0.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libpangocairo-1.0-0.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libpng16-16.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\librsvg-2-2.dll build/Release/
      #     # Reported by depends locally:
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\zlib1.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libfontconfig-1.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libgdk_pixbuf-2.0-0.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libgio-2.0-0.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libintl-8.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libpangoft2-1.0-0.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libpangowin32-1.0-0.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libxml2-2.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libcairo-gobject-2.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libffi-7.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libfribidi-0.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libgcc_s_seh-1.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libharfbuzz-0.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libiconv-2.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\liblzma-5.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libpcre-1.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libpixman-1-0.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libthai-0.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libwinpthread-1.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libdatrie-1.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libbz2-1.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libgraphite2.dll build/Release/
      #     # In the other binding.gyp:
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libexpat-1.dll build/Release/
      #     # 'D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libcroco-0.6-3.dll # MISSING
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libgmodule-2.0-0.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libgthread-2.0-0.dll build/Release/
      #     cp D:\\a\\_temp\\msys\\msys64\\mingw64\\bin\\libgsf-1-114.dll build/Release/
      #     dir build/Release

      - name: Test binary
        # By not running in msys2, this doesn't have access to the msys2 libs
        run: npm test

      - name: Make asset
        id: make_bundle
        # I can't figure out why this isn't an env var already. It shows up with `env`.
        run: msys2 -c "UPLOAD_TO=${{ env.UPLOAD_TO }} CANVAS_VERSION_TO_BUILD=${{ env.CANVAS_VERSION_TO_BUILD}} . prebuild/tarball.sh"

      - name: Upload
        uses: actions/github-script@v2
        with:
          script: |
            const fs = require("fs");
            const assetName = "${{ steps.make_bundle.outputs.asset_name }}";
            const tagName = process.env.UPLOAD_TO || process.env.CANVAS_VERSION_TO_BUILD;
            const [owner, repo] = process.env.GITHUB_REPOSITORY.split("/");

            const releases = await github.repos.listReleases({owner, repo});
            const release = releases.data.find(r => r.tag_name === tagName);
            if (!release)
              throw new Error(`Tag ${tagName} not found. Did you make the GitHub release?`);

            const oldAsset = release.assets.find(a => a.name === assetName);
            if (oldAsset)
              await github.repos.deleteReleaseAsset({owner, repo, asset_id: oldAsset.id});

            // (This is equivalent to actions/upload-release-asset. We're
            // already in a script, so might as well do it here.)
            const r = await github.repos.uploadReleaseAsset({
              url: release.upload_url,
              headers: {
                "content-type": "application/x-gzip",
                "content-length": `${fs.statSync(assetName).size}`
              },
              name: assetName,
              data: fs.readFileSync(assetName)
            });
